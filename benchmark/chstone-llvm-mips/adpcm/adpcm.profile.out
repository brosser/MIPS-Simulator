===-------------------------------------------------------------------------===
LLVM profiling output for execution:
  

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 2e+02/302 upzero
  2.    50/302 encode
  3.    50/302 decode
  4.     1/302 adpcm_main
  5.     1/302 main

  NOTE: 10 functions were never executed!

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 19.48%   472/2423	encode() - 
  2. 19.4387%   471/2423	encode() - 
  3. 17.4164%   422/2423	encode() - 
  4. 8.25423%   200/2423	upzero() - 
  5. 8.25423%   200/2423	upzero() - 
  6. 4.45728%   108/2423	upzero() - .preheader
  7. 4.12712%   100/2423	main() - .preheader
  8. 3.79695%    92/2423	upzero() - .preheader2
  9. 2.06356%    50/2423	encode() - 
 10. 2.06356%    50/2423	main() - 
 11. 2.06356%    50/2423	adpcm_main() - .preheader
 12. 2.06356%    50/2423	adpcm_main() - 
 13. 2.06356%    50/2423	encode() - quantl.exit
 14. 2.06356%    50/2423	decode() - 
 15. 2.06356%    50/2423	encode() - 
 16. 0.165085%     4/2423	encode() - 
 17. 0.0412712%     1/2423	main() - 
 18. 0.0412712%     1/2423	adpcm_main() - 
 19. 0.0412712%     1/2423	adpcm_main() - 
 20. 0.0412712%     1/2423	main() - 

===-------------------------------------------------------------------------===
Annotated LLVM code for the module:


;;; %encode called 50 times.
;;;
define i32 @encode(i32 %xin1, i32 %xin2) nounwind uwtable {
	;;; Basic block executed 50 times.
  %1 = load i64* bitcast ([24 x i32]* @tqmf to i64*), align 16
  %2 = trunc i64 %1 to i32
  %3 = sext i32 %2 to i64
  %4 = mul nsw i64 %3, 12
  %5 = lshr i64 %1, 32
  %6 = trunc i64 %5 to i32
  %7 = sext i32 %6 to i64
  %8 = mul nsw i64 %7, -44
  %9 = load i64* bitcast (i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 2) to i64*), align 8
  %10 = trunc i64 %9 to i32
  %11 = sext i32 %10 to i64
  %12 = mul nsw i64 %11, -44
  %13 = add nsw i64 %12, %4
  %14 = lshr i64 %9, 32
  %15 = trunc i64 %14 to i32
  %16 = sext i32 %15 to i64
  %17 = mul nsw i64 %16, 212
  %18 = add nsw i64 %17, %8
  %19 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 4), align 16, !tbaa !0
  %20 = sext i32 %19 to i64
  %21 = mul nsw i64 %20, 48
  %22 = add nsw i64 %21, %13
  %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 5), align 4, !tbaa !0
  %24 = sext i32 %23 to i64
  %25 = mul nsw i64 %24, -624
  %26 = add nsw i64 %25, %18
  %27 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 6), align 8, !tbaa !0
  %28 = sext i32 %27 to i64
  %29 = shl nsw i64 %28, 7
  %30 = add nsw i64 %29, %22
  %31 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 7), align 4, !tbaa !0
  %32 = sext i32 %31 to i64
  %33 = mul nsw i64 %32, 1448
  %34 = add nsw i64 %33, %26
  %35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 8), align 16, !tbaa !0
  %36 = sext i32 %35 to i64
  %37 = mul nsw i64 %36, -840
  %38 = add nsw i64 %37, %30
  %39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 9), align 4, !tbaa !0
  %40 = sext i32 %39 to i64
  %41 = mul nsw i64 %40, -3220
  %42 = add nsw i64 %41, %34
  %43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 10), align 8, !tbaa !0
  %44 = sext i32 %43 to i64
  %45 = mul nsw i64 %44, 3804
  %46 = add nsw i64 %45, %38
  %47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 11), align 4, !tbaa !0
  %48 = sext i32 %47 to i64
  %49 = mul nsw i64 %48, 15504
  %50 = add nsw i64 %49, %42
  %51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 12), align 16, !tbaa !0
  %52 = sext i32 %51 to i64
  %53 = mul nsw i64 %52, 15504
  %54 = add nsw i64 %53, %46
  %55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 13), align 4, !tbaa !0
  %56 = sext i32 %55 to i64
  %57 = mul nsw i64 %56, 3804
  %58 = add nsw i64 %57, %50
  %59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 14), align 8, !tbaa !0
  %60 = sext i32 %59 to i64
  %61 = mul nsw i64 %60, -3220
  %62 = add nsw i64 %61, %54
  %63 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 15), align 4, !tbaa !0
  %64 = sext i32 %63 to i64
  %65 = mul nsw i64 %64, -840
  %66 = add nsw i64 %65, %58
  %67 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 16), align 16, !tbaa !0
  %68 = sext i32 %67 to i64
  %69 = mul nsw i64 %68, 1448
  %70 = add nsw i64 %69, %62
  %71 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 17), align 4, !tbaa !0
  %72 = sext i32 %71 to i64
  %73 = shl nsw i64 %72, 7
  %74 = add nsw i64 %73, %66
  %75 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 18), align 8, !tbaa !0
  %76 = sext i32 %75 to i64
  %77 = mul nsw i64 %76, -624
  %78 = add nsw i64 %77, %70
  %79 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 19), align 4, !tbaa !0
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %80, 48
  %82 = add nsw i64 %81, %74
  %83 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 20), align 16, !tbaa !0
  %84 = sext i32 %83 to i64
  %85 = mul nsw i64 %84, 212
  %86 = add nsw i64 %85, %78
  %87 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 21), align 4, !tbaa !0
  %88 = sext i32 %87 to i64
  %89 = mul nsw i64 %88, -44
  %90 = add nsw i64 %89, %82
  %91 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 22), align 8, !tbaa !0
  %92 = sext i32 %91 to i64
  %93 = mul nsw i64 %92, -44
  %94 = add nsw i64 %93, %86
  %95 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 23), align 4, !tbaa !0
  %96 = sext i32 %95 to i64
  %97 = mul nsw i64 %96, 12
  store i32 %87, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 23), align 4, !tbaa !0
  store i32 %83, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 22), align 8, !tbaa !0
  store i32 %79, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 21), align 4, !tbaa !0
  store i32 %75, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 20), align 16, !tbaa !0
  store i32 %71, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 19), align 4, !tbaa !0
  store i32 %67, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 18), align 8, !tbaa !0
  store i32 %63, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 17), align 4, !tbaa !0
  store i32 %59, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 16), align 16, !tbaa !0
  store i32 %55, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 15), align 4, !tbaa !0
  store i32 %51, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 14), align 8, !tbaa !0
  store i32 %47, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 13), align 4, !tbaa !0
  store i32 %43, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 12), align 16, !tbaa !0
  store i32 %39, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 11), align 4, !tbaa !0
  store i32 %35, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 10), align 8, !tbaa !0
  store i32 %31, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 9), align 4, !tbaa !0
  store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 8), align 16, !tbaa !0
  store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 7), align 4, !tbaa !0
  store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 6), align 8, !tbaa !0
  store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 5), align 4, !tbaa !0
  store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 4), align 16, !tbaa !0
  store i32 %6, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 3), align 4, !tbaa !0
  store i32 %2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 2), align 8, !tbaa !0
  %98 = add nsw i64 %97, %90
  store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 1), align 4, !tbaa !0
  store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i64 0, i64 0), align 16, !tbaa !0
  %99 = add nsw i64 %98, %94
  %100 = lshr i64 %99, 15
  %101 = trunc i64 %100 to i32
  store i32 %101, i32* @xl, align 4, !tbaa !0
  %102 = sub nsw i64 %94, %98
  %103 = lshr i64 %102, 15
  %104 = trunc i64 %103 to i32
  store i32 %104, i32* @xh, align 4, !tbaa !0
  %105 = load i64* bitcast ([6 x i32]* @delay_bpl to i64*), align 16
  %sext = shl i64 %105, 32
  %106 = ashr exact i64 %sext, 32
  %107 = load i64* bitcast ([6 x i32]* @delay_dltx to i64*), align 16
  %sext26 = shl i64 %107, 32
  %108 = ashr exact i64 %sext26, 32
  %109 = mul nsw i64 %108, %106
  %110 = ashr i64 %105, 32
  %111 = ashr i64 %107, 32
  %112 = mul nsw i64 %111, %110
  %113 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i64 0, i64 2) to i64*), align 8
  %sext29 = shl i64 %113, 32
  %114 = ashr exact i64 %sext29, 32
  %115 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i64 0, i64 2) to i64*), align 8
  %sext30 = shl i64 %115, 32
  %116 = ashr exact i64 %sext30, 32
  %117 = mul nsw i64 %116, %114
  %118 = ashr i64 %113, 32
  %119 = ashr i64 %115, 32
  %120 = mul nsw i64 %119, %118
  %121 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i64 0, i64 4) to i64*), align 16
  %sext33 = shl i64 %121, 32
  %122 = ashr exact i64 %sext33, 32
  %123 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i64 0, i64 4) to i64*), align 16
  %sext34 = shl i64 %123, 32
  %124 = ashr exact i64 %sext34, 32
  %125 = mul nsw i64 %124, %122
  %126 = ashr i64 %121, 32
  %127 = ashr i64 %123, 32
  %128 = mul nsw i64 %127, %126
  %129 = add i64 %112, %109
  %130 = add i64 %129, %117
  %131 = add i64 %130, %120
  %132 = add i64 %131, %125
  %133 = add i64 %132, %128
  %134 = lshr i64 %133, 14
  %135 = trunc i64 %134 to i32
  store i32 %135, i32* @szl, align 4, !tbaa !0
  %136 = load i32* @rlt1, align 4, !tbaa !0
  %137 = load i32* @al1, align 4, !tbaa !0
  %138 = load i32* @rlt2, align 4, !tbaa !0
  %139 = load i32* @al2, align 4, !tbaa !0
  %140 = shl nsw i32 %136, 1
  %141 = sext i32 %140 to i64
  %142 = sext i32 %137 to i64
  %143 = mul nsw i64 %142, %141
  %144 = shl nsw i32 %138, 1
  %145 = sext i32 %144 to i64
  %146 = sext i32 %139 to i64
  %147 = mul nsw i64 %146, %145
  %148 = add nsw i64 %147, %143
  %149 = lshr i64 %148, 15
  %150 = trunc i64 %149 to i32
  store i32 %150, i32* @spl, align 4, !tbaa !0
  %151 = add nsw i32 %150, %135
  store i32 %151, i32* @sl, align 4, !tbaa !0
  %152 = sub nsw i32 %101, %151
  store i32 %152, i32* @el, align 4, !tbaa !0
  %153 = load i32* @detl, align 4, !tbaa !0
  %154 = icmp sgt i32 %152, -1
  %155 = sub nsw i32 0, %152
  %m.0.i.i = select i1 %154, i32 %152, i32 %155
  %156 = sext i32 %m.0.i.i to i64
  %157 = sext i32 %153 to i64
  br label %158
	;;; Out-edge counts: [5.000000e+01 -> ]

; <label>:158                                     ; preds = %168, %0
	;;; Basic block executed 472 times.
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %168 ], [ 0, %0 ]
  %mil.0.i = phi i32 [ %169, %168 ], [ 0, %0 ]
  %159 = trunc i64 %indvars.iv.i to i32
  %160 = icmp slt i32 %159, 30
  br i1 %160, label %161, label %quantl.exit
	;;; Out-edge counts: [4.710000e+02 -> ] [1.000000e+00 -> quantl.exit]

; <label>:161                                     ; preds = %158
	;;; Basic block executed 471 times.
  %162 = getelementptr inbounds [30 x i32]* @decis_levl, i64 0, i64 %indvars.iv.i
  %163 = load i32* %162, align 4, !tbaa !0
  %164 = sext i32 %163 to i64
  %165 = mul nsw i64 %164, %157
  %166 = ashr i64 %165, 15
  %167 = icmp sgt i64 %156, %166
  br i1 %167, label %168, label %quantl.exit
	;;; Out-edge counts: [4.220000e+02 -> ] [4.900000e+01 -> quantl.exit]

; <label>:168                                     ; preds = %161
	;;; Basic block executed 422 times.
  %indvars.iv.next.i = add i64 %indvars.iv.i, 1
  %169 = add nsw i32 %mil.0.i, 1
  br label %158
	;;; Out-edge counts: [4.220000e+02 -> ]

quantl.exit:                                      ; preds = %161, %158
	;;; Basic block executed 50 times.
  %170 = sext i32 %mil.0.i to i64
  %quant26bt_pos.quant26bt_neg.i = select i1 %154, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg
  %ril.0.in.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i, i64 0, i64 %170
  %ril.0.i = load i32* %ril.0.in.i, align 4
  store i32 %ril.0.i, i32* @il, align 4, !tbaa !0
  %171 = ashr i32 %ril.0.i, 2
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i64 0, i64 %172
  %174 = load i32* %173, align 4, !tbaa !0
  %175 = sext i32 %174 to i64
  %176 = mul nsw i64 %175, %157
  %177 = lshr i64 %176, 15
  %178 = trunc i64 %177 to i32
  store i32 %178, i32* @dlt, align 4, !tbaa !0
  %179 = load i32* @nbl, align 4, !tbaa !0
  %180 = sext i32 %179 to i64
  %181 = mul nsw i64 %180, 127
  %182 = lshr i64 %181, 7
  %183 = trunc i64 %182 to i32
  %184 = getelementptr inbounds [16 x i32]* @wl_code_table, i64 0, i64 %172
  %185 = load i32* %184, align 4, !tbaa !0
  %186 = add nsw i32 %183, %185
  %187 = icmp slt i32 %186, 0
  %.0.i9 = select i1 %187, i32 0, i32 %186
  %188 = icmp sgt i32 %.0.i9, 18432
  %.1.i10 = select i1 %188, i32 18432, i32 %.0.i9
  store i32 %.1.i10, i32* @nbl, align 4, !tbaa !0
  %189 = lshr i32 %.1.i10, 6
  %190 = and i32 %189, 31
  %191 = ashr i32 %.1.i10, 11
  %192 = zext i32 %190 to i64
  %193 = getelementptr inbounds [32 x i32]* @ilb_table, i64 0, i64 %192
  %194 = load i32* %193, align 4, !tbaa !0
  %195 = sub i32 9, %191
  %196 = ashr i32 %194, %195
  %197 = shl i32 %196, 3
  store i32 %197, i32* @detl, align 4, !tbaa !0
  %198 = add nsw i32 %135, %178
  store i32 %198, i32* @plt, align 4, !tbaa !0
  tail call void @upzero(i32 %178, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i64 0, i64 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i64 0, i64 0))
  %199 = load i32* @al1, align 4, !tbaa !0
  %200 = load i32* @al2, align 4, !tbaa !0
  %201 = load i32* @plt, align 4, !tbaa !0
  %202 = load i32* @plt1, align 4, !tbaa !0
  %203 = load i32* @plt2, align 4, !tbaa !0
  %204 = sext i32 %199 to i64
  %205 = shl nsw i64 %204, 2
  %206 = sext i32 %201 to i64
  %207 = sext i32 %202 to i64
  %208 = mul nsw i64 %207, %206
  %209 = icmp sgt i64 %208, -1
  %210 = sub nsw i64 0, %205
  %wd2.0.i5 = select i1 %209, i64 %210, i64 %205
  %211 = lshr i64 %wd2.0.i5, 7
  %212 = sext i32 %203 to i64
  %213 = mul nsw i64 %212, %206
  %214 = ashr i64 %213, 63
  %215 = and i64 %214, 4294967040
  %216 = or i64 %215, 128
  %217 = sext i32 %200 to i64
  %218 = mul nsw i64 %217, 127
  %219 = lshr i64 %218, 7
  %wd4.0.i6 = add i64 %211, %219
  %220 = add i64 %wd4.0.i6, %216
  %221 = trunc i64 %220 to i32
  %222 = icmp sgt i32 %221, 12288
  %apl2.0.i7 = select i1 %222, i32 12288, i32 %221
  %223 = icmp slt i32 %apl2.0.i7, -12288
  %apl2.1.i8 = select i1 %223, i32 -12288, i32 %apl2.0.i7
  store i32 %apl2.1.i8, i32* @al2, align 4, !tbaa !0
  %224 = mul nsw i64 %204, 255
  %225 = lshr i64 %224, 8
  %226 = trunc i64 %225 to i32
  %apl1.0.v.i1 = select i1 %209, i32 192, i32 -192
  %apl1.0.i2 = add i32 %apl1.0.v.i1, %226
  %227 = sub nsw i32 15360, %apl2.1.i8
  %228 = icmp sgt i32 %apl1.0.i2, %227
  %apl1.1.i3 = select i1 %228, i32 %227, i32 %apl1.0.i2
  %229 = sub nsw i32 0, %227
  %230 = icmp slt i32 %apl1.1.i3, %229
  %apl1.2.i4 = select i1 %230, i32 %229, i32 %apl1.1.i3
  store i32 %apl1.2.i4, i32* @al1, align 4, !tbaa !0
  %231 = load i32* @sl, align 4, !tbaa !0
  %232 = load i32* @dlt, align 4, !tbaa !0
  %233 = add nsw i32 %232, %231
  store i32 %233, i32* @rlt, align 4, !tbaa !0
  %234 = load i32* @rlt1, align 4, !tbaa !0
  store i32 %234, i32* @rlt2, align 4, !tbaa !0
  store i32 %233, i32* @rlt1, align 4, !tbaa !0
  store i32 %202, i32* @plt2, align 4, !tbaa !0
  store i32 %201, i32* @plt1, align 4, !tbaa !0
  %235 = load i64* bitcast ([6 x i32]* @delay_bph to i64*), align 16
  %sext37 = shl i64 %235, 32
  %236 = ashr exact i64 %sext37, 32
  %237 = load i64* bitcast ([6 x i32]* @delay_dhx to i64*), align 16
  %sext38 = shl i64 %237, 32
  %238 = ashr exact i64 %sext38, 32
  %239 = mul nsw i64 %238, %236
  %240 = ashr i64 %235, 32
  %241 = ashr i64 %237, 32
  %242 = mul nsw i64 %241, %240
  %243 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @delay_bph, i64 0, i64 2) to i64*), align 8
  %sext41 = shl i64 %243, 32
  %244 = ashr exact i64 %sext41, 32
  %245 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i64 0, i64 2) to i64*), align 8
  %sext42 = shl i64 %245, 32
  %246 = ashr exact i64 %sext42, 32
  %247 = mul nsw i64 %246, %244
  %248 = ashr i64 %243, 32
  %249 = ashr i64 %245, 32
  %250 = mul nsw i64 %249, %248
  %251 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @delay_bph, i64 0, i64 4) to i64*), align 16
  %sext45 = shl i64 %251, 32
  %252 = ashr exact i64 %sext45, 32
  %253 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i64 0, i64 4) to i64*), align 16
  %sext46 = shl i64 %253, 32
  %254 = ashr exact i64 %sext46, 32
  %255 = mul nsw i64 %254, %252
  %256 = ashr i64 %251, 32
  %257 = ashr i64 %253, 32
  %258 = mul nsw i64 %257, %256
  %259 = add i64 %242, %239
  %260 = add i64 %259, %247
  %261 = add i64 %260, %250
  %262 = add i64 %261, %255
  %263 = add i64 %262, %258
  %264 = lshr i64 %263, 14
  %265 = trunc i64 %264 to i32
  store i32 %265, i32* @szh, align 4, !tbaa !0
  %266 = load i32* @rh1, align 4, !tbaa !0
  %267 = load i32* @ah1, align 4, !tbaa !0
  %268 = load i32* @rh2, align 4, !tbaa !0
  %269 = load i32* @ah2, align 4, !tbaa !0
  %270 = shl nsw i32 %266, 1
  %271 = sext i32 %270 to i64
  %272 = sext i32 %267 to i64
  %273 = mul nsw i64 %272, %271
  %274 = shl nsw i32 %268, 1
  %275 = sext i32 %274 to i64
  %276 = sext i32 %269 to i64
  %277 = mul nsw i64 %276, %275
  %278 = add nsw i64 %277, %273
  %279 = lshr i64 %278, 15
  %280 = trunc i64 %279 to i32
  store i32 %280, i32* @sph, align 4, !tbaa !0
  %281 = add nsw i32 %280, %265
  store i32 %281, i32* @sh, align 4, !tbaa !0
  %282 = load i32* @xh, align 4, !tbaa !0
  %283 = sub nsw i32 %282, %281
  store i32 %283, i32* @eh, align 4, !tbaa !0
  %284 = ashr i32 %283, 31
  %285 = and i32 %284, -2
  %286 = add i32 %285, 3
  store i32 %286, i32* @ih, align 4
  %287 = load i32* @deth, align 4, !tbaa !0
  %288 = sext i32 %287 to i64
  %289 = mul nsw i64 %288, 564
  %290 = lshr i64 %289, 12
  %291 = trunc i64 %290 to i32
  %292 = icmp sgt i32 %283, -1
  %293 = sub nsw i32 0, %283
  %m.0.i = select i1 %292, i32 %283, i32 %293
  %294 = icmp sgt i32 %m.0.i, %291
  br i1 %294, label %295, label %297
	;;; Out-edge counts: [4.000000e+00 -> ] [4.600000e+01 -> ]

; <label>:295                                     ; preds = %quantl.exit
	;;; Basic block executed 4 times.
  %296 = add i32 %285, 2
  store i32 %296, i32* @ih, align 4, !tbaa !0
  br label %297
	;;; Out-edge counts: [4.000000e+00 -> ]

; <label>:297                                     ; preds = %295, %quantl.exit
	;;; Basic block executed 50 times.
  %298 = phi i32 [ %296, %295 ], [ %286, %quantl.exit ]
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i64 0, i64 %299
  %301 = load i32* %300, align 4, !tbaa !0
  %302 = sext i32 %301 to i64
  %303 = mul nsw i64 %302, %288
  %304 = lshr i64 %303, 15
  %305 = trunc i64 %304 to i32
  store i32 %305, i32* @dh, align 4, !tbaa !0
  %306 = load i32* @nbh, align 4, !tbaa !0
  %307 = sext i32 %306 to i64
  %308 = mul nsw i64 %307, 127
  %309 = lshr i64 %308, 7
  %310 = trunc i64 %309 to i32
  %311 = getelementptr inbounds [4 x i32]* @wh_code_table, i64 0, i64 %299
  %312 = load i32* %311, align 4, !tbaa !0
  %313 = add nsw i32 %310, %312
  %314 = icmp slt i32 %313, 0
  %.0.i = select i1 %314, i32 0, i32 %313
  %315 = icmp sgt i32 %.0.i, 22528
  %.1.i = select i1 %315, i32 22528, i32 %.0.i
  store i32 %.1.i, i32* @nbh, align 4, !tbaa !0
  %316 = lshr i32 %.1.i, 6
  %317 = and i32 %316, 31
  %318 = ashr i32 %.1.i, 11
  %319 = zext i32 %317 to i64
  %320 = getelementptr inbounds [32 x i32]* @ilb_table, i64 0, i64 %319
  %321 = load i32* %320, align 4, !tbaa !0
  %322 = sub i32 11, %318
  %323 = ashr i32 %321, %322
  %324 = shl i32 %323, 3
  store i32 %324, i32* @deth, align 4, !tbaa !0
  %325 = add nsw i32 %265, %305
  store i32 %325, i32* @ph, align 4, !tbaa !0
  tail call void @upzero(i32 %305, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i64 0, i64 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i64 0, i64 0))
  %326 = load i32* @ah1, align 4, !tbaa !0
  %327 = load i32* @ah2, align 4, !tbaa !0
  %328 = load i32* @ph, align 4, !tbaa !0
  %329 = load i32* @ph1, align 4, !tbaa !0
  %330 = load i32* @ph2, align 4, !tbaa !0
  %331 = sext i32 %326 to i64
  %332 = shl nsw i64 %331, 2
  %333 = sext i32 %328 to i64
  %334 = sext i32 %329 to i64
  %335 = mul nsw i64 %334, %333
  %336 = icmp sgt i64 %335, -1
  %337 = sub nsw i64 0, %332
  %wd2.0.i = select i1 %336, i64 %337, i64 %332
  %338 = lshr i64 %wd2.0.i, 7
  %339 = sext i32 %330 to i64
  %340 = mul nsw i64 %339, %333
  %341 = ashr i64 %340, 63
  %342 = and i64 %341, 4294967040
  %343 = or i64 %342, 128
  %344 = sext i32 %327 to i64
  %345 = mul nsw i64 %344, 127
  %346 = lshr i64 %345, 7
  %wd4.0.i = add i64 %338, %346
  %347 = add i64 %wd4.0.i, %343
  %348 = trunc i64 %347 to i32
  %349 = icmp sgt i32 %348, 12288
  %apl2.0.i = select i1 %349, i32 12288, i32 %348
  %350 = icmp slt i32 %apl2.0.i, -12288
  %apl2.1.i = select i1 %350, i32 -12288, i32 %apl2.0.i
  store i32 %apl2.1.i, i32* @ah2, align 4, !tbaa !0
  %351 = mul nsw i64 %331, 255
  %352 = lshr i64 %351, 8
  %353 = trunc i64 %352 to i32
  %apl1.0.v.i = select i1 %336, i32 192, i32 -192
  %apl1.0.i = add i32 %apl1.0.v.i, %353
  %354 = sub nsw i32 15360, %apl2.1.i
  %355 = icmp sgt i32 %apl1.0.i, %354
  %apl1.1.i = select i1 %355, i32 %354, i32 %apl1.0.i
  %356 = sub nsw i32 0, %354
  %357 = icmp slt i32 %apl1.1.i, %356
  %apl1.2.i = select i1 %357, i32 %356, i32 %apl1.1.i
  store i32 %apl1.2.i, i32* @ah1, align 4, !tbaa !0
  %358 = load i32* @sh, align 4, !tbaa !0
  %359 = load i32* @dh, align 4, !tbaa !0
  %360 = add nsw i32 %359, %358
  store i32 %360, i32* @yh, align 4, !tbaa !0
  %361 = load i32* @rh1, align 4, !tbaa !0
  store i32 %361, i32* @rh2, align 4, !tbaa !0
  store i32 %360, i32* @rh1, align 4, !tbaa !0
  store i32 %329, i32* @ph2, align 4, !tbaa !0
  store i32 %328, i32* @ph1, align 4, !tbaa !0
  %362 = load i32* @il, align 4, !tbaa !0
  %363 = load i32* @ih, align 4, !tbaa !0
  %364 = shl i32 %363, 6
  %365 = or i32 %364, %362
  ret i32 %365
}

;;; %upzero called 200 times.
;;;
define void @upzero(i32 %dlt, i32* nocapture %dlti, i32* nocapture %bli) nounwind uwtable {
	;;; Basic block executed 200 times.
  %1 = icmp eq i32 %dlt, 0
  br i1 %1, label %.preheader2, label %.preheader
	;;; Out-edge counts: [9.200000e+01 -> .preheader2] [1.080000e+02 -> .preheader]

.preheader2:                                      ; preds = %0
	;;; Basic block executed 92 times.
  %2 = load i32* %bli, align 4, !tbaa !0
  %3 = sext i32 %2 to i64
  %4 = mul nsw i64 %3, 255
  %5 = lshr i64 %4, 8
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %bli, align 4, !tbaa !0
  %7 = getelementptr inbounds i32* %bli, i64 1
  %8 = load i32* %7, align 4, !tbaa !0
  %9 = sext i32 %8 to i64
  %10 = mul nsw i64 %9, 255
  %11 = lshr i64 %10, 8
  %12 = trunc i64 %11 to i32
  store i32 %12, i32* %7, align 4, !tbaa !0
  %13 = getelementptr inbounds i32* %bli, i64 2
  %14 = load i32* %13, align 4, !tbaa !0
  %15 = sext i32 %14 to i64
  %16 = mul nsw i64 %15, 255
  %17 = lshr i64 %16, 8
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %13, align 4, !tbaa !0
  %19 = getelementptr inbounds i32* %bli, i64 3
  %20 = load i32* %19, align 4, !tbaa !0
  %21 = sext i32 %20 to i64
  %22 = mul nsw i64 %21, 255
  %23 = lshr i64 %22, 8
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %19, align 4, !tbaa !0
  %25 = getelementptr inbounds i32* %bli, i64 4
  %26 = load i32* %25, align 4, !tbaa !0
  %27 = sext i32 %26 to i64
  %28 = mul nsw i64 %27, 255
  %29 = lshr i64 %28, 8
  %30 = trunc i64 %29 to i32
  store i32 %30, i32* %25, align 4, !tbaa !0
  %31 = getelementptr inbounds i32* %bli, i64 5
  %32 = load i32* %31, align 4, !tbaa !0
  %33 = sext i32 %32 to i64
  %34 = mul nsw i64 %33, 255
  %35 = lshr i64 %34, 8
  %36 = trunc i64 %35 to i32
  store i32 %36, i32* %31, align 4, !tbaa !0
  %.pre = getelementptr inbounds i32* %dlti, i64 4
  %.pre5 = getelementptr inbounds i32* %dlti, i64 5
  %.pre7 = getelementptr inbounds i32* %dlti, i64 3
  %.pre9 = getelementptr inbounds i32* %dlti, i64 2
  %.pre11 = getelementptr inbounds i32* %dlti, i64 1
  br label %108
	;;; Out-edge counts: [9.200000e+01 -> ]

.preheader:                                       ; preds = %0
	;;; Basic block executed 108 times.
  %37 = sext i32 %dlt to i64
  %38 = load i32* %dlti, align 4, !tbaa !0
  %39 = sext i32 %38 to i64
  %40 = mul nsw i64 %39, %37
  %41 = icmp sgt i64 %40, -1
  %. = select i1 %41, i32 128, i32 -128
  %42 = load i32* %bli, align 4, !tbaa !0
  %43 = sext i32 %42 to i64
  %44 = mul nsw i64 %43, 255
  %45 = lshr i64 %44, 8
  %46 = trunc i64 %45 to i32
  %47 = add nsw i32 %46, %.
  store i32 %47, i32* %bli, align 4, !tbaa !0
  %48 = getelementptr inbounds i32* %dlti, i64 1
  %49 = load i32* %48, align 4, !tbaa !0
  %50 = sext i32 %49 to i64
  %51 = mul nsw i64 %50, %37
  %52 = icmp sgt i64 %51, -1
  %..1 = select i1 %52, i32 128, i32 -128
  %53 = getelementptr inbounds i32* %bli, i64 1
  %54 = load i32* %53, align 4, !tbaa !0
  %55 = sext i32 %54 to i64
  %56 = mul nsw i64 %55, 255
  %57 = lshr i64 %56, 8
  %58 = trunc i64 %57 to i32
  %59 = add nsw i32 %58, %..1
  store i32 %59, i32* %53, align 4, !tbaa !0
  %60 = getelementptr inbounds i32* %dlti, i64 2
  %61 = load i32* %60, align 4, !tbaa !0
  %62 = sext i32 %61 to i64
  %63 = mul nsw i64 %62, %37
  %64 = icmp sgt i64 %63, -1
  %..2 = select i1 %64, i32 128, i32 -128
  %65 = getelementptr inbounds i32* %bli, i64 2
  %66 = load i32* %65, align 4, !tbaa !0
  %67 = sext i32 %66 to i64
  %68 = mul nsw i64 %67, 255
  %69 = lshr i64 %68, 8
  %70 = trunc i64 %69 to i32
  %71 = add nsw i32 %70, %..2
  store i32 %71, i32* %65, align 4, !tbaa !0
  %72 = getelementptr inbounds i32* %dlti, i64 3
  %73 = load i32* %72, align 4, !tbaa !0
  %74 = sext i32 %73 to i64
  %75 = mul nsw i64 %74, %37
  %76 = icmp sgt i64 %75, -1
  %..3 = select i1 %76, i32 128, i32 -128
  %77 = getelementptr inbounds i32* %bli, i64 3
  %78 = load i32* %77, align 4, !tbaa !0
  %79 = sext i32 %78 to i64
  %80 = mul nsw i64 %79, 255
  %81 = lshr i64 %80, 8
  %82 = trunc i64 %81 to i32
  %83 = add nsw i32 %82, %..3
  store i32 %83, i32* %77, align 4, !tbaa !0
  %84 = getelementptr inbounds i32* %dlti, i64 4
  %85 = load i32* %84, align 4, !tbaa !0
  %86 = sext i32 %85 to i64
  %87 = mul nsw i64 %86, %37
  %88 = icmp sgt i64 %87, -1
  %..4 = select i1 %88, i32 128, i32 -128
  %89 = getelementptr inbounds i32* %bli, i64 4
  %90 = load i32* %89, align 4, !tbaa !0
  %91 = sext i32 %90 to i64
  %92 = mul nsw i64 %91, 255
  %93 = lshr i64 %92, 8
  %94 = trunc i64 %93 to i32
  %95 = add nsw i32 %94, %..4
  store i32 %95, i32* %89, align 4, !tbaa !0
  %96 = getelementptr inbounds i32* %dlti, i64 5
  %97 = load i32* %96, align 4, !tbaa !0
  %98 = sext i32 %97 to i64
  %99 = mul nsw i64 %98, %37
  %100 = icmp sgt i64 %99, -1
  %..5 = select i1 %100, i32 128, i32 -128
  %101 = getelementptr inbounds i32* %bli, i64 5
  %102 = load i32* %101, align 4, !tbaa !0
  %103 = sext i32 %102 to i64
  %104 = mul nsw i64 %103, 255
  %105 = lshr i64 %104, 8
  %106 = trunc i64 %105 to i32
  %107 = add nsw i32 %106, %..5
  store i32 %107, i32* %101, align 4, !tbaa !0
  br label %108
	;;; Out-edge counts: [1.080000e+02 -> ]

; <label>:108                                     ; preds = %.preheader, %.preheader2
	;;; Basic block executed 200 times.
  %.pre-phi12 = phi i32* [ %.pre11, %.preheader2 ], [ %48, %.preheader ]
  %.pre-phi10 = phi i32* [ %.pre9, %.preheader2 ], [ %60, %.preheader ]
  %.pre-phi8 = phi i32* [ %.pre7, %.preheader2 ], [ %72, %.preheader ]
  %.pre-phi6 = phi i32* [ %.pre5, %.preheader2 ], [ %96, %.preheader ]
  %.pre-phi = phi i32* [ %.pre, %.preheader2 ], [ %84, %.preheader ]
  %109 = load i32* %.pre-phi, align 4, !tbaa !0
  store i32 %109, i32* %.pre-phi6, align 4, !tbaa !0
  %110 = load i32* %.pre-phi8, align 4, !tbaa !0
  store i32 %110, i32* %.pre-phi, align 4, !tbaa !0
  %111 = load i32* %.pre-phi10, align 4, !tbaa !0
  store i32 %111, i32* %.pre-phi8, align 4, !tbaa !0
  %112 = load i32* %dlti, align 4, !tbaa !0
  store i32 %112, i32* %.pre-phi12, align 4, !tbaa !0
  store i32 %dlt, i32* %dlti, align 4, !tbaa !0
  ret void
}

;;; %decode called 50 times.
;;;
define void @decode(i32 %input) nounwind uwtable {
	;;; Basic block executed 50 times.
  %1 = and i32 %input, 63
  store i32 %1, i32* @ilr, align 4, !tbaa !0
  %2 = ashr i32 %input, 6
  store i32 %2, i32* @ih, align 4, !tbaa !0
  %3 = load i64* bitcast ([6 x i32]* @dec_del_bpl to i64*), align 16
  %sext = shl i64 %3, 32
  %4 = ashr exact i64 %sext, 32
  %5 = load i64* bitcast ([6 x i32]* @dec_del_dltx to i64*), align 16
  %sext30 = shl i64 %5, 32
  %6 = ashr exact i64 %sext30, 32
  %7 = mul nsw i64 %6, %4
  %8 = ashr i64 %3, 32
  %9 = ashr i64 %5, 32
  %10 = mul nsw i64 %9, %8
  %11 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i64 0, i64 2) to i64*), align 8
  %sext33 = shl i64 %11, 32
  %12 = ashr exact i64 %sext33, 32
  %13 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i64 0, i64 2) to i64*), align 8
  %sext34 = shl i64 %13, 32
  %14 = ashr exact i64 %sext34, 32
  %15 = mul nsw i64 %14, %12
  %16 = ashr i64 %11, 32
  %17 = ashr i64 %13, 32
  %18 = mul nsw i64 %17, %16
  %19 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i64 0, i64 4) to i64*), align 16
  %sext37 = shl i64 %19, 32
  %20 = ashr exact i64 %sext37, 32
  %21 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i64 0, i64 4) to i64*), align 16
  %sext38 = shl i64 %21, 32
  %22 = ashr exact i64 %sext38, 32
  %23 = mul nsw i64 %22, %20
  %24 = ashr i64 %19, 32
  %25 = ashr i64 %21, 32
  %26 = mul nsw i64 %25, %24
  %27 = add i64 %10, %7
  %28 = add i64 %27, %15
  %29 = add i64 %28, %18
  %30 = add i64 %29, %23
  %31 = add i64 %30, %26
  %32 = lshr i64 %31, 14
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* @dec_szl, align 4, !tbaa !0
  %34 = load i32* @dec_rlt1, align 4, !tbaa !0
  %35 = load i32* @dec_al1, align 4, !tbaa !0
  %36 = load i32* @dec_rlt2, align 4, !tbaa !0
  %37 = load i32* @dec_al2, align 4, !tbaa !0
  %38 = shl nsw i32 %34, 1
  %39 = sext i32 %38 to i64
  %40 = sext i32 %35 to i64
  %41 = mul nsw i64 %40, %39
  %42 = shl nsw i32 %36, 1
  %43 = sext i32 %42 to i64
  %44 = sext i32 %37 to i64
  %45 = mul nsw i64 %44, %43
  %46 = add nsw i64 %45, %41
  %47 = lshr i64 %46, 15
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* @dec_spl, align 4, !tbaa !0
  %49 = add nsw i32 %48, %33
  store i32 %49, i32* @dec_sl, align 4, !tbaa !0
  %50 = load i32* @dec_detl, align 4, !tbaa !0
  %51 = sext i32 %50 to i64
  %52 = lshr i32 %1, 2
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i64 0, i64 %53
  %55 = load i32* %54, align 4, !tbaa !0
  %56 = sext i32 %55 to i64
  %57 = mul nsw i64 %56, %51
  %58 = lshr i64 %57, 15
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* @dec_dlt, align 4, !tbaa !0
  %60 = load i32* @il, align 4, !tbaa !0
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i64 0, i64 %61
  %63 = load i32* %62, align 4, !tbaa !0
  %64 = sext i32 %63 to i64
  %65 = mul nsw i64 %64, %51
  %66 = lshr i64 %65, 15
  %67 = trunc i64 %66 to i32
  store i32 %67, i32* @dl, align 4, !tbaa !0
  %68 = add nsw i32 %67, %49
  store i32 %68, i32* @rl, align 4, !tbaa !0
  %69 = load i32* @dec_nbl, align 4, !tbaa !0
  %70 = sext i32 %69 to i64
  %71 = mul nsw i64 %70, 127
  %72 = lshr i64 %71, 7
  %73 = trunc i64 %72 to i32
  %74 = getelementptr inbounds [16 x i32]* @wl_code_table, i64 0, i64 %53
  %75 = load i32* %74, align 4, !tbaa !0
  %76 = add nsw i32 %73, %75
  %77 = icmp slt i32 %76, 0
  %.0.i9 = select i1 %77, i32 0, i32 %76
  %78 = icmp sgt i32 %.0.i9, 18432
  %.1.i10 = select i1 %78, i32 18432, i32 %.0.i9
  store i32 %.1.i10, i32* @dec_nbl, align 4, !tbaa !0
  %79 = lshr i32 %.1.i10, 6
  %80 = and i32 %79, 31
  %81 = ashr i32 %.1.i10, 11
  %82 = zext i32 %80 to i64
  %83 = getelementptr inbounds [32 x i32]* @ilb_table, i64 0, i64 %82
  %84 = load i32* %83, align 4, !tbaa !0
  %85 = sub i32 9, %81
  %86 = ashr i32 %84, %85
  %87 = shl i32 %86, 3
  store i32 %87, i32* @dec_detl, align 4, !tbaa !0
  %88 = add nsw i32 %33, %59
  store i32 %88, i32* @dec_plt, align 4, !tbaa !0
  tail call void @upzero(i32 %59, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i64 0, i64 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i64 0, i64 0))
  %89 = load i32* @dec_al1, align 4, !tbaa !0
  %90 = load i32* @dec_al2, align 4, !tbaa !0
  %91 = load i32* @dec_plt, align 4, !tbaa !0
  %92 = load i32* @dec_plt1, align 4, !tbaa !0
  %93 = load i32* @dec_plt2, align 4, !tbaa !0
  %94 = sext i32 %89 to i64
  %95 = shl nsw i64 %94, 2
  %96 = sext i32 %91 to i64
  %97 = sext i32 %92 to i64
  %98 = mul nsw i64 %97, %96
  %99 = icmp sgt i64 %98, -1
  %100 = sub nsw i64 0, %95
  %wd2.0.i5 = select i1 %99, i64 %100, i64 %95
  %101 = lshr i64 %wd2.0.i5, 7
  %102 = sext i32 %93 to i64
  %103 = mul nsw i64 %102, %96
  %104 = ashr i64 %103, 63
  %105 = and i64 %104, 4294967040
  %106 = or i64 %105, 128
  %107 = sext i32 %90 to i64
  %108 = mul nsw i64 %107, 127
  %109 = lshr i64 %108, 7
  %wd4.0.i6 = add i64 %101, %109
  %110 = add i64 %wd4.0.i6, %106
  %111 = trunc i64 %110 to i32
  %112 = icmp sgt i32 %111, 12288
  %apl2.0.i7 = select i1 %112, i32 12288, i32 %111
  %113 = icmp slt i32 %apl2.0.i7, -12288
  %apl2.1.i8 = select i1 %113, i32 -12288, i32 %apl2.0.i7
  store i32 %apl2.1.i8, i32* @dec_al2, align 4, !tbaa !0
  %114 = mul nsw i64 %94, 255
  %115 = lshr i64 %114, 8
  %116 = trunc i64 %115 to i32
  %apl1.0.v.i1 = select i1 %99, i32 192, i32 -192
  %apl1.0.i2 = add i32 %apl1.0.v.i1, %116
  %117 = sub nsw i32 15360, %apl2.1.i8
  %118 = icmp sgt i32 %apl1.0.i2, %117
  %apl1.1.i3 = select i1 %118, i32 %117, i32 %apl1.0.i2
  %119 = sub nsw i32 0, %117
  %120 = icmp slt i32 %apl1.1.i3, %119
  %apl1.2.i4 = select i1 %120, i32 %119, i32 %apl1.1.i3
  store i32 %apl1.2.i4, i32* @dec_al1, align 4, !tbaa !0
  %121 = load i32* @dec_sl, align 4, !tbaa !0
  %122 = load i32* @dec_dlt, align 4, !tbaa !0
  %123 = add nsw i32 %122, %121
  store i32 %123, i32* @dec_rlt, align 4, !tbaa !0
  %124 = load i32* @dec_rlt1, align 4, !tbaa !0
  store i32 %124, i32* @dec_rlt2, align 4, !tbaa !0
  store i32 %123, i32* @dec_rlt1, align 4, !tbaa !0
  store i32 %92, i32* @dec_plt2, align 4, !tbaa !0
  store i32 %91, i32* @dec_plt1, align 4, !tbaa !0
  %125 = load i64* bitcast ([6 x i32]* @dec_del_bph to i64*), align 16
  %sext41 = shl i64 %125, 32
  %126 = ashr exact i64 %sext41, 32
  %127 = load i64* bitcast ([6 x i32]* @dec_del_dhx to i64*), align 16
  %sext42 = shl i64 %127, 32
  %128 = ashr exact i64 %sext42, 32
  %129 = mul nsw i64 %128, %126
  %130 = ashr i64 %125, 32
  %131 = ashr i64 %127, 32
  %132 = mul nsw i64 %131, %130
  %133 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i64 0, i64 2) to i64*), align 8
  %sext45 = shl i64 %133, 32
  %134 = ashr exact i64 %sext45, 32
  %135 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i64 0, i64 2) to i64*), align 8
  %sext46 = shl i64 %135, 32
  %136 = ashr exact i64 %sext46, 32
  %137 = mul nsw i64 %136, %134
  %138 = ashr i64 %133, 32
  %139 = ashr i64 %135, 32
  %140 = mul nsw i64 %139, %138
  %141 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i64 0, i64 4) to i64*), align 16
  %sext49 = shl i64 %141, 32
  %142 = ashr exact i64 %sext49, 32
  %143 = load i64* bitcast (i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i64 0, i64 4) to i64*), align 16
  %sext50 = shl i64 %143, 32
  %144 = ashr exact i64 %sext50, 32
  %145 = mul nsw i64 %144, %142
  %146 = ashr i64 %141, 32
  %147 = ashr i64 %143, 32
  %148 = mul nsw i64 %147, %146
  %149 = add i64 %132, %129
  %150 = add i64 %149, %137
  %151 = add i64 %150, %140
  %152 = add i64 %151, %145
  %153 = add i64 %152, %148
  %154 = lshr i64 %153, 14
  %155 = trunc i64 %154 to i32
  store i32 %155, i32* @dec_szh, align 4, !tbaa !0
  %156 = load i32* @dec_rh1, align 4, !tbaa !0
  %157 = load i32* @dec_ah1, align 4, !tbaa !0
  %158 = load i32* @dec_rh2, align 4, !tbaa !0
  %159 = load i32* @dec_ah2, align 4, !tbaa !0
  %160 = shl nsw i32 %156, 1
  %161 = sext i32 %160 to i64
  %162 = sext i32 %157 to i64
  %163 = mul nsw i64 %162, %161
  %164 = shl nsw i32 %158, 1
  %165 = sext i32 %164 to i64
  %166 = sext i32 %159 to i64
  %167 = mul nsw i64 %166, %165
  %168 = add nsw i64 %167, %163
  %169 = lshr i64 %168, 15
  %170 = trunc i64 %169 to i32
  store i32 %170, i32* @dec_sph, align 4, !tbaa !0
  %171 = add nsw i32 %170, %155
  store i32 %171, i32* @dec_sh, align 4, !tbaa !0
  %172 = load i32* @dec_deth, align 4, !tbaa !0
  %173 = sext i32 %172 to i64
  %174 = load i32* @ih, align 4, !tbaa !0
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i64 0, i64 %175
  %177 = load i32* %176, align 4, !tbaa !0
  %178 = sext i32 %177 to i64
  %179 = mul nsw i64 %178, %173
  %180 = lshr i64 %179, 15
  %181 = trunc i64 %180 to i32
  store i32 %181, i32* @dec_dh, align 4, !tbaa !0
  %182 = load i32* @dec_nbh, align 4, !tbaa !0
  %183 = sext i32 %182 to i64
  %184 = mul nsw i64 %183, 127
  %185 = lshr i64 %184, 7
  %186 = trunc i64 %185 to i32
  %187 = getelementptr inbounds [4 x i32]* @wh_code_table, i64 0, i64 %175
  %188 = load i32* %187, align 4, !tbaa !0
  %189 = add nsw i32 %186, %188
  %190 = icmp slt i32 %189, 0
  %.0.i = select i1 %190, i32 0, i32 %189
  %191 = icmp sgt i32 %.0.i, 22528
  %.1.i = select i1 %191, i32 22528, i32 %.0.i
  store i32 %.1.i, i32* @dec_nbh, align 4, !tbaa !0
  %192 = lshr i32 %.1.i, 6
  %193 = and i32 %192, 31
  %194 = ashr i32 %.1.i, 11
  %195 = zext i32 %193 to i64
  %196 = getelementptr inbounds [32 x i32]* @ilb_table, i64 0, i64 %195
  %197 = load i32* %196, align 4, !tbaa !0
  %198 = sub i32 11, %194
  %199 = ashr i32 %197, %198
  %200 = shl i32 %199, 3
  store i32 %200, i32* @dec_deth, align 4, !tbaa !0
  %201 = add nsw i32 %155, %181
  store i32 %201, i32* @dec_ph, align 4, !tbaa !0
  tail call void @upzero(i32 %181, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i64 0, i64 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i64 0, i64 0))
  %202 = load i32* @dec_ah1, align 4, !tbaa !0
  %203 = load i32* @dec_ah2, align 4, !tbaa !0
  %204 = load i32* @dec_ph, align 4, !tbaa !0
  %205 = load i32* @dec_ph1, align 4, !tbaa !0
  %206 = load i32* @dec_ph2, align 4, !tbaa !0
  %207 = sext i32 %202 to i64
  %208 = shl nsw i64 %207, 2
  %209 = sext i32 %204 to i64
  %210 = sext i32 %205 to i64
  %211 = mul nsw i64 %210, %209
  %212 = icmp sgt i64 %211, -1
  %213 = sub nsw i64 0, %208
  %wd2.0.i = select i1 %212, i64 %213, i64 %208
  %214 = lshr i64 %wd2.0.i, 7
  %215 = sext i32 %206 to i64
  %216 = mul nsw i64 %215, %209
  %217 = ashr i64 %216, 63
  %218 = and i64 %217, 4294967040
  %219 = or i64 %218, 128
  %220 = sext i32 %203 to i64
  %221 = mul nsw i64 %220, 127
  %222 = lshr i64 %221, 7
  %wd4.0.i = add i64 %214, %222
  %223 = add i64 %wd4.0.i, %219
  %224 = trunc i64 %223 to i32
  %225 = icmp sgt i32 %224, 12288
  %apl2.0.i = select i1 %225, i32 12288, i32 %224
  %226 = icmp slt i32 %apl2.0.i, -12288
  %apl2.1.i = select i1 %226, i32 -12288, i32 %apl2.0.i
  store i32 %apl2.1.i, i32* @dec_ah2, align 4, !tbaa !0
  %227 = mul nsw i64 %207, 255
  %228 = lshr i64 %227, 8
  %229 = trunc i64 %228 to i32
  %apl1.0.v.i = select i1 %212, i32 192, i32 -192
  %apl1.0.i = add i32 %apl1.0.v.i, %229
  %230 = sub nsw i32 15360, %apl2.1.i
  %231 = icmp sgt i32 %apl1.0.i, %230
  %apl1.1.i = select i1 %231, i32 %230, i32 %apl1.0.i
  %232 = sub nsw i32 0, %230
  %233 = icmp slt i32 %apl1.1.i, %232
  %apl1.2.i = select i1 %233, i32 %232, i32 %apl1.1.i
  store i32 %apl1.2.i, i32* @dec_ah1, align 4, !tbaa !0
  %234 = load i32* @dec_sh, align 4, !tbaa !0
  %235 = load i32* @dec_dh, align 4, !tbaa !0
  %236 = add nsw i32 %235, %234
  store i32 %236, i32* @rh, align 4, !tbaa !0
  %237 = load i32* @dec_rh1, align 4, !tbaa !0
  store i32 %237, i32* @dec_rh2, align 4, !tbaa !0
  store i32 %236, i32* @dec_rh1, align 4, !tbaa !0
  store i32 %205, i32* @dec_ph2, align 4, !tbaa !0
  store i32 %204, i32* @dec_ph1, align 4, !tbaa !0
  %238 = load i32* @rl, align 4, !tbaa !0
  %239 = sub nsw i32 %238, %236
  store i32 %239, i32* @xd, align 4, !tbaa !0
  %240 = add nsw i32 %236, %238
  store i32 %240, i32* @xs, align 4, !tbaa !0
  %241 = sext i32 %239 to i64
  %242 = mul nsw i64 %241, 12
  %243 = sext i32 %240 to i64
  %244 = mul nsw i64 %243, -44
  %245 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 0), align 16, !tbaa !0
  %246 = sext i32 %245 to i64
  %247 = mul nsw i64 %246, -44
  %248 = add nsw i64 %247, %242
  %249 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 0), align 16, !tbaa !0
  %250 = sext i32 %249 to i64
  %251 = mul nsw i64 %250, 212
  %252 = add nsw i64 %251, %244
  %253 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 1), align 4, !tbaa !0
  %254 = sext i32 %253 to i64
  %255 = mul nsw i64 %254, 48
  %256 = add nsw i64 %255, %248
  %257 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 1), align 4, !tbaa !0
  %258 = sext i32 %257 to i64
  %259 = mul nsw i64 %258, -624
  %260 = add nsw i64 %259, %252
  %261 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 2), align 8, !tbaa !0
  %262 = sext i32 %261 to i64
  %263 = shl nsw i64 %262, 7
  %264 = add nsw i64 %263, %256
  %265 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 2), align 8, !tbaa !0
  %266 = sext i32 %265 to i64
  %267 = mul nsw i64 %266, 1448
  %268 = add nsw i64 %267, %260
  %269 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 3), align 4, !tbaa !0
  %270 = sext i32 %269 to i64
  %271 = mul nsw i64 %270, -840
  %272 = add nsw i64 %271, %264
  %273 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 3), align 4, !tbaa !0
  %274 = sext i32 %273 to i64
  %275 = mul nsw i64 %274, -3220
  %276 = add nsw i64 %275, %268
  %277 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 4), align 16, !tbaa !0
  %278 = sext i32 %277 to i64
  %279 = mul nsw i64 %278, 3804
  %280 = add nsw i64 %279, %272
  %281 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 4), align 16, !tbaa !0
  %282 = sext i32 %281 to i64
  %283 = mul nsw i64 %282, 15504
  %284 = add nsw i64 %283, %276
  %285 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 5), align 4, !tbaa !0
  %286 = sext i32 %285 to i64
  %287 = mul nsw i64 %286, 15504
  %288 = add nsw i64 %287, %280
  %289 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 5), align 4, !tbaa !0
  %290 = sext i32 %289 to i64
  %291 = mul nsw i64 %290, 3804
  %292 = add nsw i64 %291, %284
  %293 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 6), align 8, !tbaa !0
  %294 = sext i32 %293 to i64
  %295 = mul nsw i64 %294, -3220
  %296 = add nsw i64 %295, %288
  %297 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 6), align 8, !tbaa !0
  %298 = sext i32 %297 to i64
  %299 = mul nsw i64 %298, -840
  %300 = add nsw i64 %299, %292
  %301 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 7), align 4, !tbaa !0
  %302 = sext i32 %301 to i64
  %303 = mul nsw i64 %302, 1448
  %304 = add nsw i64 %303, %296
  %305 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 7), align 4, !tbaa !0
  %306 = sext i32 %305 to i64
  %307 = shl nsw i64 %306, 7
  %308 = add nsw i64 %307, %300
  %309 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 8), align 16, !tbaa !0
  %310 = sext i32 %309 to i64
  %311 = mul nsw i64 %310, -624
  %312 = add nsw i64 %311, %304
  %313 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 8), align 16, !tbaa !0
  %314 = sext i32 %313 to i64
  %315 = mul nsw i64 %314, 48
  %316 = add nsw i64 %315, %308
  %317 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 9), align 4, !tbaa !0
  %318 = sext i32 %317 to i64
  %319 = mul nsw i64 %318, 212
  %320 = add nsw i64 %319, %312
  %321 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 9), align 4, !tbaa !0
  %322 = sext i32 %321 to i64
  %323 = mul nsw i64 %322, -44
  %324 = add nsw i64 %323, %316
  %325 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 10), align 8, !tbaa !0
  %326 = sext i32 %325 to i64
  %327 = mul nsw i64 %326, -44
  %328 = add nsw i64 %327, %320
  %329 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 10), align 8, !tbaa !0
  %330 = sext i32 %329 to i64
  %331 = mul nsw i64 %330, 12
  %332 = add nsw i64 %331, %324
  %333 = lshr i64 %328, 14
  %334 = trunc i64 %333 to i32
  store i32 %334, i32* @xout1, align 4, !tbaa !0
  %335 = lshr i64 %332, 14
  %336 = trunc i64 %335 to i32
  store i32 %336, i32* @xout2, align 4, !tbaa !0
  store i32 %317, i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 10), align 8, !tbaa !0
  store i32 %321, i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 10), align 8, !tbaa !0
  store i32 %309, i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 9), align 4, !tbaa !0
  store i32 %313, i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 9), align 4, !tbaa !0
  store i32 %301, i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 8), align 16, !tbaa !0
  store i32 %305, i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 8), align 16, !tbaa !0
  store i32 %293, i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 7), align 4, !tbaa !0
  store i32 %297, i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 7), align 4, !tbaa !0
  store i32 %285, i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 6), align 8, !tbaa !0
  store i32 %289, i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 6), align 8, !tbaa !0
  store i32 %277, i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 5), align 4, !tbaa !0
  store i32 %281, i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 5), align 4, !tbaa !0
  store i32 %269, i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 4), align 16, !tbaa !0
  store i32 %273, i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 4), align 16, !tbaa !0
  store i32 %261, i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 3), align 4, !tbaa !0
  store i32 %265, i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 3), align 4, !tbaa !0
  store i32 %253, i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 2), align 8, !tbaa !0
  store i32 %257, i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 2), align 8, !tbaa !0
  store i32 %245, i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 1), align 4, !tbaa !0
  store i32 %249, i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 1), align 4, !tbaa !0
  store i32 %239, i32* getelementptr inbounds ([11 x i32]* @accumc, i64 0, i64 0), align 16, !tbaa !0
  store i32 %240, i32* getelementptr inbounds ([11 x i32]* @accumd, i64 0, i64 0), align 16, !tbaa !0
  ret void
}

;;; %adpcm_main called 1 times.
;;;
define void @adpcm_main() nounwind uwtable {
	;;; Basic block executed 1 times.
  store i32 32, i32* @dec_detl, align 4, !tbaa !0
  store i32 32, i32* @detl, align 4, !tbaa !0
  store i32 8, i32* @dec_deth, align 4, !tbaa !0
  store i32 8, i32* @deth, align 4, !tbaa !0
  store i32 0, i32* @rlt2, align 4, !tbaa !0
  store i32 0, i32* @rlt1, align 4, !tbaa !0
  store i32 0, i32* @plt2, align 4, !tbaa !0
  store i32 0, i32* @plt1, align 4, !tbaa !0
  store i32 0, i32* @al2, align 4, !tbaa !0
  store i32 0, i32* @al1, align 4, !tbaa !0
  store i32 0, i32* @nbl, align 4, !tbaa !0
  store i32 0, i32* @rh2, align 4, !tbaa !0
  store i32 0, i32* @rh1, align 4, !tbaa !0
  store i32 0, i32* @ph2, align 4, !tbaa !0
  store i32 0, i32* @ph1, align 4, !tbaa !0
  store i32 0, i32* @ah2, align 4, !tbaa !0
  store i32 0, i32* @ah1, align 4, !tbaa !0
  store i32 0, i32* @nbh, align 4, !tbaa !0
  store i32 0, i32* @dec_rlt2, align 4, !tbaa !0
  store i32 0, i32* @dec_rlt1, align 4, !tbaa !0
  store i32 0, i32* @dec_plt2, align 4, !tbaa !0
  store i32 0, i32* @dec_plt1, align 4, !tbaa !0
  store i32 0, i32* @dec_al2, align 4, !tbaa !0
  store i32 0, i32* @dec_al1, align 4, !tbaa !0
  store i32 0, i32* @dec_nbl, align 4, !tbaa !0
  store i32 0, i32* @dec_rh2, align 4, !tbaa !0
  store i32 0, i32* @dec_rh1, align 4, !tbaa !0
  store i32 0, i32* @dec_ph2, align 4, !tbaa !0
  store i32 0, i32* @dec_ph1, align 4, !tbaa !0
  store i32 0, i32* @dec_ah2, align 4, !tbaa !0
  store i32 0, i32* @dec_ah1, align 4, !tbaa !0
  store i32 0, i32* @dec_nbh, align 4, !tbaa !0
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([6 x i32]* @delay_dltx to i8*), i8 0, i64 24, i32 16, i1 false) nounwind
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([6 x i32]* @delay_dhx to i8*), i8 0, i64 24, i32 16, i1 false) nounwind
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([6 x i32]* @dec_del_dltx to i8*), i8 0, i64 24, i32 16, i1 false) nounwind
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([6 x i32]* @dec_del_dhx to i8*), i8 0, i64 24, i32 16, i1 false) nounwind
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([6 x i32]* @delay_bpl to i8*), i8 0, i64 24, i32 16, i1 false) nounwind
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([6 x i32]* @delay_bph to i8*), i8 0, i64 24, i32 16, i1 false) nounwind
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([6 x i32]* @dec_del_bpl to i8*), i8 0, i64 24, i32 16, i1 false) nounwind
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([6 x i32]* @dec_del_bph to i8*), i8 0, i64 24, i32 16, i1 false) nounwind
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96, i32 16, i1 false) nounwind
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([11 x i32]* @accumc to i8*), i8 0, i64 44, i32 16, i1 false) nounwind
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([11 x i32]* @accumd to i8*), i8 0, i64 44, i32 16, i1 false) nounwind
  br label %1
	;;; Out-edge counts: [1.000000e+00 -> ]

; <label>:1                                       ; preds = %1, %0
	;;; Basic block executed 50 times.
  %indvars.iv3 = phi i64 [ 0, %0 ], [ %indvars.iv.next4, %1 ]
  %2 = getelementptr inbounds [100 x i32]* @test_data, i64 0, i64 %indvars.iv3
  %3 = load i32* %2, align 8, !tbaa !0
  %4 = or i64 %indvars.iv3, 1
  %5 = getelementptr inbounds [100 x i32]* @test_data, i64 0, i64 %4
  %6 = load i32* %5, align 4, !tbaa !0
  %7 = tail call i32 @encode(i32 %3, i32 %6)
  %8 = trunc i64 %indvars.iv3 to i32
  %9 = sdiv i32 %8, 2
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds [100 x i32]* @compressed, i64 0, i64 %10
  store i32 %7, i32* %11, align 4, !tbaa !0
  %indvars.iv.next4 = add i64 %indvars.iv3, 2
  %12 = trunc i64 %indvars.iv.next4 to i32
  %13 = icmp slt i32 %12, 100
  br i1 %13, label %1, label %.preheader
	;;; Out-edge counts: [4.900000e+01 -> ] [1.000000e+00 -> .preheader]

.preheader:                                       ; preds = %.preheader, %1
	;;; Basic block executed 50 times.
  %indvars.iv = phi i64 [ %indvars.iv.next, %.preheader ], [ 0, %1 ]
  %14 = trunc i64 %indvars.iv to i32
  %15 = sdiv i32 %14, 2
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [100 x i32]* @compressed, i64 0, i64 %16
  %18 = load i32* %17, align 4, !tbaa !0
  tail call void @decode(i32 %18)
  %19 = load i32* @xout1, align 4, !tbaa !0
  %20 = getelementptr inbounds [100 x i32]* @result, i64 0, i64 %indvars.iv
  store i32 %19, i32* %20, align 8, !tbaa !0
  %21 = load i32* @xout2, align 4, !tbaa !0
  %22 = or i64 %indvars.iv, 1
  %23 = getelementptr inbounds [100 x i32]* @result, i64 0, i64 %22
  store i32 %21, i32* %23, align 4, !tbaa !0
  %indvars.iv.next = add i64 %indvars.iv, 2
  %24 = trunc i64 %indvars.iv.next to i32
  %25 = icmp slt i32 %24, 100
  br i1 %25, label %.preheader, label %26
	;;; Out-edge counts: [4.900000e+01 -> .preheader] [1.000000e+00 -> ]

; <label>:26                                      ; preds = %.preheader
	;;; Basic block executed 1 times.
  ret void
}

;;; %main called 1 times.
;;;
define i32 @main() nounwind uwtable {
	;;; Basic block executed 1 times.
  tail call void @adpcm_main()
  br label %1
	;;; Out-edge counts: [1.000000e+00 -> ]

; <label>:1                                       ; preds = %1, %0
	;;; Basic block executed 50 times.
  %indvars.iv5 = phi i64 [ 0, %0 ], [ %indvars.iv.next6, %1 ]
  %main_result.04 = phi i32 [ 0, %0 ], [ %main_result.1, %1 ]
  %2 = getelementptr inbounds [100 x i32]* @compressed, i64 0, i64 %indvars.iv5
  %3 = load i32* %2, align 4, !tbaa !0
  %4 = getelementptr inbounds [100 x i32]* @test_compressed, i64 0, i64 %indvars.iv5
  %5 = load i32* %4, align 4, !tbaa !0
  %6 = icmp eq i32 %3, %5
  %main_result.1 = select i1 %6, i32 %main_result.04, i32 1
  %indvars.iv.next6 = add i64 %indvars.iv5, 1
  %lftr.wideiv7 = trunc i64 %indvars.iv.next6 to i32
  %exitcond8 = icmp eq i32 %lftr.wideiv7, 50
  br i1 %exitcond8, label %.preheader, label %1
	;;; Out-edge counts: [1.000000e+00 -> .preheader] [4.900000e+01 -> ]

.preheader:                                       ; preds = %.preheader, %1
	;;; Basic block executed 100 times.
  %indvars.iv = phi i64 [ %indvars.iv.next, %.preheader ], [ 0, %1 ]
  %main_result.22 = phi i32 [ %main_result.3, %.preheader ], [ %main_result.1, %1 ]
  %7 = getelementptr inbounds [100 x i32]* @result, i64 0, i64 %indvars.iv
  %8 = load i32* %7, align 4, !tbaa !0
  %9 = getelementptr inbounds [100 x i32]* @test_result, i64 0, i64 %indvars.iv
  %10 = load i32* %9, align 4, !tbaa !0
  %11 = icmp eq i32 %8, %10
  %main_result.3 = select i1 %11, i32 %main_result.22, i32 1
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 100
  br i1 %exitcond, label %12, label %.preheader
	;;; Out-edge counts: [1.000000e+00 -> ] [9.900000e+01 -> .preheader]

; <label>:12                                      ; preds = %.preheader
	;;; Basic block executed 1 times.
  ret i32 %main_result.3
}
